<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一，为了使用接口动态代理，这里必须是接口的全路径名 -->
<mapper namespace="com.wn.mybatis.dao.UserMapper">
    <!-- 二级缓存：作用域是一个mapper的namespace ，同一个namespace中查询sql可以从缓存中命中。
                   开启二级缓存，必须序列化：
    -->
<!--    <cache/>-->
    <!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一
       resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表
     -->
    <!--
       1.#{},预编译的方式preparedstatement，使用占位符替换，防止sql注入，一个参数的时候，任意参数名可以接收
       2.${},普通的Statement，字符串直接拼接，不可以防止sql注入，一个参数的时候，必须使用${value}接收参数
     -->

    <sql id="baseColumns">
        id,user_name as userName,password,name,sex,age,birthday,created,updated
    </sql>

    <sql id="columns">
        id,user_name,password,name,sex,age,birthday,created,updated
    </sql>
    
    <select id="queryUserByTableName" resultType="com.wn.mybatis.pojo.User">
        select * from ${tableName}
    </select>

    <select id="login" resultType="com.wn.mybatis.pojo.User">
        select * from tb_user where user_name=#{userName} and password=#{password}
    </select>

    <!-- statement，内容：sql语句。
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       resultType：sql语句查询结果集的封装类型，使用动态代理之后和方法的返回类型一致；resultMap：二选一
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
     -->
    <select id="queryUserById" parameterType="string" resultType="com.wn.mybatis.pojo.User">
        select
        <include refid="baseColumns"/>
        from tb_user
        where id = #{id}
    </select>

    <select id="queryUserAll" resultType="com.wn.mybatis.pojo.User">
        select
        <include refid="baseColumns"/>
        from tb_user
    </select>

    <!-- 新增的Statement
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
       useGeneratedKeys:开启主键回写
       keyColumn：指定数据库的主键
       keyProperty：主键对应的pojo属性名
     -->
    <insert id="insertUser" useGeneratedKeys="true" keyColumn="id" keyProperty="id"
            parameterType="com.wn.mybatis.pojo.User">
        insert into tb_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="columns"/>
        </trim>
        <trim prefix="values(" suffix=")" suffixOverrides=",">
            #{id},
            #{userName},
            #{password},
            #{name},
            #{sex},
            #{age},
            #{birthday},
            now(),
            now(),
        </trim>
    </insert>

    <!--
       更新的statement
       id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
       parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
     -->
    <update id="updateUser">
        update tb_user
        <trim prefix="set" suffixOverrides=",">
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="password !=null and password !=''">
                password = #{password},
            </if>
            <if test="name != null and name !=''">
                name = #{name},
            </if>
            <if test="age != null">
                age = #{age},
            </if>
            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="birthday != null">
                birthday = #{birthday},
            </if>
            updated = sysdate(),
        </trim>
        where
        id = #{id}
    </update>

    <!--
      删除的statement
      id：唯一标识，随便写，在同一个命名空间下保持唯一，使用动态代理之后要求和方法名保持一致
      parameterType：参数的类型，使用动态代理之后和方法的参数类型一致
    -->
    <delete id="deleteUserById" parameterType="string">
        delete from tb_user where id = #{id}
    </delete>

    <select id="querySomeUsers" resultType="com.wn.mybatis.pojo.User">
        select
        <include refid="baseColumns"/>
        from tb_user
        where user_name in
        <foreach collection="names" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <select id="searchUsers" resultType="com.wn.mybatis.pojo.User">
        select * from tb_user where 1=1
        <choose>
            <when test="userName != null and userName.trim() != ''">
                and user_name = #{userName}
            </when>
            <when test="age != null and age != 0">
                and age = #{age}
            </when>
            <otherwise>
                and id = '1'
            </otherwise>
        </choose>
    </select>

    <select id="searchUsers2" resultType="com.wn.mybatis.pojo.User">
        select 
        <include refid="baseColumns"/>
        from tb_user
        <where>
            <if test="userName != null and userName.trim() != ''">
                and user_name like  concat('%',#{userName})
            </if>
            <if test="age != null ">
                and age = #{age}
            </if>
        </where>
    </select>
</mapper>